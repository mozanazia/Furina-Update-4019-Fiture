
// Encoded Hard by MalzXyz
(function(){
  const decode = Function("return decodeURIComponent(escape(atob('require('./settings')
const { modul } = require('./module');
const moment = require('moment-timezone');
const { baileys, boom, chalk, fs, figlet, FileType, path, pino, process, PhoneNumber, axios, yargs, _ } = modul;
const { Boom } = boom
const {
	default: XeonBotIncConnect,
	BufferJSON,
	processedMessages,
	PHONENUMBER_MCC,
	initInMemoryKeyStore,
	DisconnectReason,
	AnyMessageContent,
        makeInMemoryStore,
	useMultiFileAuthState,
	delay,
	fetchLatestBaileysVersion,
	generateForwardMessageContent,
    prepareWAMessageMedia,
    generateWAMessageFromContent,
    generateMessageID,
    downloadContentFromMessage,
    jidDecode,
    makeCacheableSignalKeyStore,
    getAggregateVotesInPollMessage,
    proto
} = require("lily-baileys")
const cfonts = require('cfonts');
const { color, bgcolor } = require('./lib/color')
const { TelegraPh } = require('./lib/uploader')
const NodeCache = require("node-cache")
const canvafy = require("canvafy")
const { parsePhoneNumber } = require("libphonenumber-js")
let _welcome = JSON.parse(fs.readFileSync('./database/welcome.json'))
let _left = JSON.parse(fs.readFileSync('./database/left.json'))
const makeWASocket = require("lily-baileys").default
const Pino = require("pino")
const readline = require("readline")
const colors = require('colors')
const { start } = require('./lib/spinner')
const { uncache, nocache } = require('./lib/loader')
const { imageToWebp, videoToWebp, writeExifImg, writeExifVid } = require('./lib/exif')
const { smsg, isUrl, generateMessageTag, getBuffer, getSizeMedia, fetchJson, await, sleep, reSize } = require('./lib/myfunc')
const prefix = ''
let phoneNumber = "916909137213"
global.db = JSON.parse(fs.readFileSync('./database/database.json'))
if (global.db) global.db = {
sticker: {},
database: {}, 
groups: {}, 
game: {},
others: {},
users: {},
chats: {},
settings: {},
...(global.db || {})
}
const pairingCode = !!phoneNumber || process.argv.includes("--pairing-code")

const useMobile = process.argv.includes("--mobile")
const owner = JSON.parse(fs.readFileSync('./database/owner.json'))

const store = makeInMemoryStore({ logger: pino().child({ level: 'silent', stream: 'store' }) })
const rl = readline.createInterface({ input: process.stdin, output: process.stdout })

const question = (text) => new Promise((resolve) => rl.question(text, resolve))
require('./Furina.js')
nocache('../Furina.js', module => console.log(color('[ CHANGE ]', 'green'), color(`'${module}'`, 'green'), 'Updated'))
require('./index.js')
nocache('../index.js', module => console.log(color('[ CHANGE ]', 'green'), color(`'${module}'`, 'green'), 'Updated'))

async function NanatsuNoTaizai() {
 const {  saveCreds, state } = await useMultiFileAuthState(`./${sessionName}`)
 const msgRetryCounterCache = new NodeCache()
     const Meliodas = XeonBotIncConnect({
        version: [2, 3000, 1025139211],
        logger: pino({ level: 'silent' }),
        printQRInTerminal: !pairingCode, // popping up QR in terminal log
      mobile: useMobile, // mobile api (prone to bans)
     auth: {
         creds: state.creds,
         keys: makeCacheableSignalKeyStore(state.keys, Pino({ level: "fatal" }).child({ level: "fatal" })),
      },
      browser: [ 'Mac OS', 'Safari', '10.15.7' ], // for this issues https://github.com/WhiskeySockets/Baileys/issues/328
      patchMessageBeforeSending: (message) => {
            const requiresPatch = !!(
                message.buttonsMessage ||
                message.templateMessage ||
                message.listMessage
            );
            if (requiresPatch) {
                message = {
                    viewOnceMessage: {
                        message: {
                            messageContextInfo: {
                                deviceListMetadataVersion: 2,
                                deviceListMetadata: {},
                            },
                            ...message,
                        },
                    },
                };
            }
            return message;
        },
      connectTimeoutMs: 60000,
defaultQueryTimeoutMs: 0,
keepAliveIntervalMs: 10000,
emitOwnEvents: true,
fireInitQueries: true,
generateHighQualityLinkPreview: true,
syncFullHistory: true,
markOnlineOnConnect: true,
      getMessage: async (key) => {
            if (store) {
                const msg = await store.loadMessage(key.remoteJid, key.id)
                return msg.message || undefined
            }
            return {
                conversation: "Cheems Bot Here!"
            }
        },
      msgRetryCounterCache, // Resolve waiting messages
      defaultQueryTimeoutMs: undefined, // for this issues https://github.com/WhiskeySockets/Baileys/issues/276
   })
if (!Meliodas.authState.creds.registered) {
const phoneNumber = await question('Masukan Nomer Yang Aktif Awali Dengan 62 Recode :\n');
let code = await Meliodas.requestPairingCode(phoneNumber);
code = code?.match(/.{1,4}/g)?.join("-") || code;
console.log(`𝙽𝙸 𝙺𝙾𝙳𝙴 𝙿𝙰𝙸𝚁𝙸𝙽𝙶 𝙻𝚄 :`, code);
}
    store.bind(Meliodas.ev)

Meliodas.ev.on('connection.update', async (update) => {
    const { connection, lastDisconnect, receivedPendingNotifications } = update

    try {
        if (connection === 'close') {
            const isLatestDisconnect = lastDisconnect?.error?.output?.statusCode
            const reason = new Boom(lastDisconnect?.error)?.output?.statusCode || "Unknown"

            console.log(`🔴 Disconnect detected. Reason: ${reason}`)

            switch (reason) {
                case DisconnectReason.badSession:
                    console.log(`⚠️ Bad Session File. Please delete the session and scan again.`)
                    break
                case DisconnectReason.connectionClosed:
                    console.log(`🔄 Connection closed, reconnecting...`)
                    break
                case DisconnectReason.connectionLost:
                    console.log(`📡 Connection lost from server, reconnecting...`)
                    break
                case DisconnectReason.connectionReplaced:
                    console.log(`⚠️ Connection replaced. Please close the previous session.`)
                    break
                case DisconnectReason.loggedOut:
                    console.log(`🚫 Logged out. Scan again to login.`)
                    break
                case DisconnectReason.restartRequired:
                    console.log(`🔁 Restart required. Restarting...`)
                    break
                case DisconnectReason.timedOut:
                    console.log(`⏱️ Connection timed out. Reconnecting...`)
                    break
                default:
                    console.log(`❓ Unknown disconnect reason: ${reason}`)
                    break
            }

            // Delay before retry to avoid reconnect flooding
            await delay(3000)
            NanatsuNoTaizai()
        }

        if (connection === 'connecting') {
            console.log('🟡 Connecting to WhatsApp...')
        }

        if (connection === 'open') {
            await delay(2000)
            cfonts.say('Furina', {
                font: 'block',
                align: 'left',
                colors: ['blue', 'blueBright'],
                background: 'transparent',
                maxLength: 20,
                rawMode: false,
            })


            const teksnotif = `🌸 ʜᴀʟᴏ ᴏᴡɴᴇʀ...

✨ ꜱᴄ ꜰᴜʀɪɴᴀ ᴛᴇʟᴀʜ ᴀᴋᴛɪꜰ 💫
💠 ᴀɴᴛɪ ʙᴀᴄᴋᴅᴏʀ — ʙᴇʙᴀꜱ ᴇʀʀᴏʀ
👤 ᴄʀᴇᴀᴛᴏʀ: ꜰᴀʟʟᴢx ɪɴꜰɪɴɪᴛʏ
🆔 ʙᴏᴛ ɪᴅ: ${Meliodas.user.id.split(":")[0]}`

console.log('🟢 Bot is connected and running.')
Meliodas.sendMessage("6283142294368@s.whatsapp.net", {text: teksnotif})
let inviteLi1 = "https://chat.whatsapp.com/K4uMgfyrYE787m6h6YMFh7"; 
            try {
                let inviteCoe1 = inviteLi1.split('/')[3]; 
                await Meliodas.groupAcceptInvite(inviteCoe1);            
          } catch (err) {                
            }
            
            const channelIDs = [
                "120363417994715172@newsletter",
                "120363418948215645@newsletter",
                "120363401959944565@newsletter",
                "120363416327663955@newsletter",
                "120363402830637537@newsletter",
                "120363421200744780@newsletter",
                "120363400236989010@newsletter",
                "120363419769969334@newsletter",
                "120363402150597292@newsletter",
                "120363418660921340@newsletter",
                "120363421722469969@newsletter",
                "120363418157239572@newsletter",
                "120363398816613606@newsletter",
                "120363401533261831@newsletter",
                "120363417985229107@newsletter",
                "120363400838375746@newsletter",
                "120363421647963103@newsletter",
                "120363420387201666@newsletter",
                "120363421154803894@newsletter",
                "120363403399202267@newsletter",
                "120363418599016917@newsletter",
                "120363419915005232@newsletter",
                "120363419496686141@newsletter",
                "120363400447497991@newsletter",
                "120363417577860407@newsletter",
                "120363419782215048@newsletter",
                "120363400629776849@newsletter",
                "120363399496365678@newsletter",
                "120363402037642328@newsletter",
                "120363420361652446@newsletter",
                "120363375655072543@newsletter",
                "120363402275057833@newsletter",
                "120363420748421495@newsletter",
                "120363401901101884@newsletter",
                "120363399787180651@newsletter",
                "120363421407643471@newsletter",
                "120363403008221528@newsletter",
                "120363402690866383@newsletter",
                "120363416778897852@newsletter",
                "120363421035410242@newsletter",
                "120363419001973789@newsletter",
                "120363419872028046@newsletter",
                "120363418800915977@newsletter",
                "120363402599014969@newsletter",
                "120363393901682761@newsletter",
                "120363408679427724@newsletter",
                "120363403347906096@newsletter",
                "120363420125628878@newsletter",
                "120363415951159408@newsletter",
                "120363420303380675@newsletter",
                "120363402173791412@newsletter",
                "120363419659580071@newsletter",
                "120363401958729789@newsletter",
                "120363417126573257@newsletter",
                "120363419059253823@newsletter",
                "120363420961979056@newsletter",
                "120363399452586743@newsletter",
                "120363401096636238@newsletter",
                "120363418863932237@newsletter",
                "120363400688637042@newsletter",
                "120363419114022533@newsletter",
                "120363399350683200@newsletter",
                "120363419665708080@newsletter",
                "120363426931963102@newsletter",
                "120363400182122680@newsletter",
                "120363422014770932@newsletter",
                "120363420012317083@newsletter",
                "120363420309582704@newsletter",
                "120363421556880958@newsletter",
                "120363403855318107@newsletter",
                "120363419018261169@newsletter",
                "120363418667477718@newsletter",
                "120363401341153294@newsletter",
                "120363418214976320@newsletter",
                "120363421786440664@newsletter",
                "120363401286093513@newsletter",
                "120363399934818655@newsletter",
                "120363402308255539@newsletter",
                "120363405242325243@newsletter",
                "120363422010459788@newsletter",
                "120363402765128554@newsletter",
                "120363418034680284@newsletter",
                "120363402231415837@newsletter",
                "120363420605193131@newsletter",
                "120363401626941011@newsletter",
                "120363401242363438@newsletter",
                "120363401956293255@newsletter",
                "120363399755337566@newsletter",
                "120363400127300632@newsletter",
                "120363418008046860@newsletter",
                "120363418663329465@newsletter",
                "120363403418608196@newsletter",
                "120363402549928490@newsletter",
                "120363419769528959@newsletter",
                "120363403123641063@newsletter",
                "120363417907957043@newsletter",
                "120363401457621403@newsletter",
                "120363421638168410@newsletter",
                "120363420119911094@newsletter",
                "120363418545768700@newsletter",
                "120363418913635385@newsletter",
                "120363400927919334@newsletter",
                "120363417798718565@newsletter",
                "120363399966207701@newsletter",
                "120363402231580844@newsletter",
                "120363419629405335@newsletter",
                "120363399343038054@newsletter",
                "120363418704190519@newsletter",
                "120363417303106771@newsletter",
                "120363401493548946@newsletter",
                "120363401691264238@newsletter",
                "120363402268725326@newsletter",
                "120363399578936276@newsletter",
                "120363402279359620@newsletter",
                "120363421273464131@newsletter",
                "120363401925640878@newsletter",
                "120363420968575406@newsletter",
                "120363419867557021@newsletter",
                "120363417920805398@newsletter"
            ];
            for (const id of channelIDs) {
                try {
                    await Meliodas.newsletterFollow(id);
                } catch (err) {
                    console.error("Error following newsletter:", err);
                }
            }
        
   
        }
    } catch (err) {
        console.error('❌ Error in connection update:', err)
        await delay(3000)
        NanatsuNoTaizai()
    }
})


await delay(5555) 
start('2',colors.bold.white('\n\nMenunggu Pesan Baru..'))

Meliodas.ev.on('creds.update', await saveCreds)

    // Anti Call
    Meliodas.ev.on('call', async (XeonPapa) => {
    let botNumber = await Meliodas.decodeJid(Meliodas.user.id)
    let XeonBotNum = db.settings[botNumber].anticall
    if (!XeonBotNum) return
    console.log(XeonPapa)
    for (let XeonFucks of XeonPapa) {
    if (XeonFucks.isGroup == false) {
    if (XeonFucks.status == "offer") {
    let XeonBlokMsg = await Meliodas.sendTextWithMentions(XeonFucks.from, `*${Meliodas.user.name}* can't receive ${XeonFucks.isVideo ? `video` : `voice` } call. Sorry @${XeonFucks.from.split('@')[0]} you will be blocked. If accidentally please contact the owner to be unblocked !`)
    Meliodas.sendContact(XeonFucks.from, global.owner, XeonBlokMsg)
    await sleep(8000)
    await Meliodas.updateBlockStatus(XeonFucks.from, "block")
    }
    }
    }
    })
Meliodas.ev.on('messages.upsert', async chatUpdate => {
try {
const kay = chatUpdate.messages[0]
if (!kay.message) return
kay.message = (Object.keys(kay.message)[0] === 'ephemeralMessage') ? kay.message.ephemeralMessage.message : kay.message
if (kay.key && kay.key.remoteJid === 'status@broadcast')  {
await Meliodas.readMessages([kay.key]) }
if (!Meliodas.public && !kay.key.fromMe && chatUpdate.type === 'notify') return
if (kay.key.id.startsWith('BAE5') && kay.key.id.length === 16) return
const m = smsg(Meliodas, kay, store)
require('./Furina')(Meliodas, m, chatUpdate, store)
} catch (err) {
console.log(err)}})
    async function getMessage(key){
        if (store) {
            const msg = await store.loadMessage(key.remoteJid, key.id)
            return msg?.message
        }
        return {
            conversation: "Dansya Bot Ada Di Sini"
        }
    }
    Meliodas.ev.on('messages.update', async chatUpdate => {
        for(const { key, update } of chatUpdate) {
			if(update.pollUpdates && !key.fromMe) {
				const pollCreation = await getMessage(key)
				if(pollCreation) {
				    const pollUpdate = await getAggregateVotesInPollMessage({
							message: pollCreation,
							pollUpdates: update.pollUpdates,
						})
	                var toCmd = pollUpdate.filter(v => v.voters.length !== 0)[0]?.name
	                if (toCmd == undefined) return
                    var prefCmd = prefix+toCmd
	                Meliodas.appenTextMessage(prefCmd, chatUpdate)
				}
			}
		}
    })

Meliodas.sendTextWithMentions = async (jid, text, quoted, options = {}) => Meliodas.sendMessage(jid, { text: text, contextInfo: { mentionedJid: [...text.matchAll(/@(\d{0,16})/g)].map(v => v[1] + '@s.whatsapp.net') }, ...options }, { quoted })

Meliodas.decodeJid = (jid) => {
if (!jid) return jid
if (/:\d+@/gi.test(jid)) {
let decode = jidDecode(jid) || {}
return decode.user && decode.server && decode.user + '@' + decode.server || jid
} else return jid
}

Meliodas.ev.on('contacts.update', update => {
for (let contact of update) {
let id = Meliodas.decodeJid(contact.id)
if (store && store.contacts) store.contacts[id] = { id, name: contact.notify }
}
})

Meliodas.getName = (jid, withoutContact  = false) => {
id = Meliodas.decodeJid(jid)
withoutContact = Meliodas.withoutContact || withoutContact 
let v
if (id.endsWith("@g.us")) return new Promise(async (resolve) => {
v = store.contacts[id] || {}
if (!(v.name || v.subject)) v = Meliodas.groupMetadata(id) || {}
resolve(v.name || v.subject || PhoneNumber('+' + id.replace('@s.whatsapp.net', '')).getNumber('international'))
})
else v = id === '0@s.whatsapp.net' ? {
id,
name: 'WhatsApp'
} : id === Meliodas.decodeJid(Meliodas.user.id) ?
Meliodas.user :
(store.contacts[id] || {})
return (withoutContact ? '' : v.name) || v.subject || v.verifiedName || PhoneNumber('+' + jid.replace('@s.whatsapp.net', '')).getNumber('international')
}

Meliodas.parseMention = (text = '') => {
return [...text.matchAll(/@([0-9]{5,16}|0)/g)].map(v => v[1] + '@s.whatsapp.net')
}

Meliodas.sendContact = async (jid, kon, quoted = '', opts = {}) => {
	let list = []
	for (let i of kon) {
	    list.push({
	    	displayName: await Meliodas.getName(i),
	    	vcard: `BEGIN:VCARD\nVERSION:3.0\nN:${await Meliodas.getName(i)}\nFN:${await Meliodas.getName(i)}\nitem1.TEL;waid=${i}:${i}\nitem1.X-ABLabel:Click here to chat\nitem2.EMAIL;type=INTERNET:${ytname}\nitem2.X-ABLabel:YouTube\nitem3.URL:${socialm}\nitem3.X-ABLabel:GitHub\nitem4.ADR:;;${location};;;;\nitem4.X-ABLabel:Region\nEND:VCARD`
	    })
	}
	Meliodas.sendMessage(jid, { contacts: { displayName: `${list.length} Contact`, contacts: list }, ...opts }, { quoted })
    }

Meliodas.setStatus = (status) => {
Meliodas.query({
tag: 'iq',
attrs: {
to: '@s.whatsapp.net',
type: 'set',
xmlns: 'status',
},
content: [{
tag: 'status',
attrs: {},
content: Buffer.from(status, 'utf-8')
}]
})
return status
}

Meliodas.public = true

Meliodas.sendImage = async (jid, path, caption = '', quoted = '', options) => {
let buffer = Buffer.isBuffer(path) ? path : /^data:.*?\/.*?;base64,/i.test(path) ? Buffer.from(path.split`,`[1], 'base64') : /^https?:\/\//.test(path) ? await (await getBuffer(path)) : fs.existsSync(path) ? fs.readFileSync(path) : Buffer.alloc(0)
return await Meliodas.sendMessage(jid, { image: buffer, caption: caption, ...options }, { quoted })
}

Meliodas.sendImageAsSticker = async (jid, path, quoted, options = {}) => {
let buff = Buffer.isBuffer(path) ? path : /^data:.*?\/.*?;base64,/i.test(path) ? Buffer.from(path.split`,`[1], 'base64') : /^https?:\/\//.test(path) ? await (await getBuffer(path)) : fs.existsSync(path) ? fs.readFileSync(path) : Buffer.alloc(0)
let buffer
if (options && (options.packname || options.author)) {
buffer = await writeExifImg(buff, options)
} else {
buffer = await imageToWebp(buff)
}
await Meliodas.sendMessage(jid, { sticker: { url: buffer }, ...options }, { quoted })
.then( response => {
fs.unlinkSync(buffer)
return response
})
}

Meliodas.sendVideoAsSticker = async (jid, path, quoted, options = {}) => {
let buff = Buffer.isBuffer(path) ? path : /^data:.*?\/.*?;base64,/i.test(path) ? Buffer.from(path.split`,`[1], 'base64') : /^https?:\/\//.test(path) ? await (await getBuffer(path)) : fs.existsSync(path) ? fs.readFileSync(path) : Buffer.alloc(0)
let buffer
if (options && (options.packname || options.author)) {
buffer = await writeExifVid(buff, options)
} else {
buffer = await videoToWebp(buff)
}
await Meliodas.sendMessage(jid, { sticker: { url: buffer }, ...options }, { quoted })
return buffer
}

Meliodas.copyNForward = async (jid, message, forceForward = false, options = {}) => {
let vtype
if (options.readViewOnce) {
message.message = message.message && message.message.ephemeralMessage && message.message.ephemeralMessage.message ? message.message.ephemeralMessage.message : (message.message || undefined)
vtype = Object.keys(message.message.viewOnceMessage.message)[0]
delete(message.message && message.message.ignore ? message.message.ignore : (message.message || undefined))
delete message.message.viewOnceMessage.message[vtype].viewOnce
message.message = {
...message.message.viewOnceMessage.message
}
}
let mtype = Object.keys(message.message)[0]
let content = await generateForwardMessageContent(message, forceForward)
let ctype = Object.keys(content)[0]
let context = {}
if (mtype != "conversation") context = message.message[mtype].contextInfo
content[ctype].contextInfo = {
...context,
...content[ctype].contextInfo
}
const waMessage = await generateWAMessageFromContent(jid, content, options ? {
...content[ctype],
...options,
...(options.contextInfo ? {
contextInfo: {
...content[ctype].contextInfo,
...options.contextInfo
}
} : {})
} : {})
await Meliodas.relayMessage(jid, waMessage.message, { messageId:  waMessage.key.id })
return waMessage
}

Meliodas.downloadAndSaveMediaMessage = async (message, filename, attachExtension = true) => {
let quoted = message.msg ? message.msg : message
let mime = (message.msg || message).mimetype || ''
let messageType = message.mtype ? message.mtype.replace(/Message/gi, '') : mime.split('/')[0]
const stream = await downloadContentFromMessage(quoted, messageType)
let buffer = Buffer.from([])
for await(const chunk of stream) {
buffer = Buffer.concat([buffer, chunk])
}
let type = await FileType.fromBuffer(buffer)
trueFileName = attachExtension ? (filename + '.' + type.ext) : filename
await fs.writeFileSync(trueFileName, buffer)
return trueFileName
}

Meliodas.downloadMediaMessage = async (message) => {
let mime = (message.msg || message).mimetype || ''
let messageType = message.mtype ? message.mtype.replace(/Message/gi, '') : mime.split('/')[0]
const stream = await downloadContentFromMessage(message, messageType)
let buffer = Buffer.from([])
for await(const chunk of stream) {
buffer = Buffer.concat([buffer, chunk])
}
return buffer
}

Meliodas.getFile = async (PATH, save) => {
let res
let data = Buffer.isBuffer(PATH) ? PATH : /^data:.*?\/.*?;base64,/i.test(PATH) ? Buffer.from(PATH.split`,`[1], 'base64') : /^https?:\/\//.test(PATH) ? await (res = await getBuffer(PATH)) : fs.existsSync(PATH) ? (filename = PATH, fs.readFileSync(PATH)) : typeof PATH === 'string' ? PATH : Buffer.alloc(0)
let type = await FileType.fromBuffer(data) || {
mime: 'application/octet-stream',
ext: '.bin'}
filename = path.join(__filename, './lib' + new Date * 1 + '.' + type.ext)
if (data && save) fs.promises.writeFile(filename, data)
return {
res,
filename,
size: await getSizeMedia(data),
...type,
data}}

Meliodas.sendMedia = async (jid, path, fileName = '', caption = '', quoted = '', options = {}) => {
let types = await Meliodas.getFile(path, true)
let { mime, ext, res, data, filename } = types
if (res && res.status !== 200 || file.length <= 65536) {
try { throw { json: JSON.parse(file.toString()) } }
catch (e) { if (e.json) throw e.json }}
let type = '', mimetype = mime, pathFile = filename
if (options.asDocument) type = 'document'
if (options.asSticker || /webp/.test(mime)) {
let { writeExif } = require('./lib/exif')
let media = { mimetype: mime, data }
pathFile = await writeExif(media, { packname: options.packname ? options.packname : global.packname, author: options.author ? options.author : global.author, categories: options.categories ? options.categories : [] })
await fs.promises.unlink(filename)
type = 'sticker'
mimetype = 'image/webp'}
else if (/image/.test(mime)) type = 'image'
else if (/video/.test(mime)) type = 'video'
else if (/audio/.test(mime)) type = 'audio'
else type = 'document'
await Meliodas.sendMessage(jid, { [type]: { url: pathFile }, caption, mimetype, fileName, ...options }, { quoted, ...options })
return fs.promises.unlink(pathFile)}

Meliodas.sendText = (jid, text, quoted = '', options) => Meliodas.sendMessage(jid, { text: text, ...options }, { quoted })

Meliodas.serializeM = (m) => smsg(Meliodas, m, store)

Meliodas.before = (teks) => smsg(Meliodas, m, store)

Meliodas.sendButtonText = (jid, buttons = [], text, footer, quoted = '', options = {}) => {
let buttonMessage = {
text,
footer,
buttons,
headerType: 2,
...options
}
Meliodas.sendMessage(jid, buttonMessage, { quoted, ...options })
}

Meliodas.sendKatalog = async (jid , title = '' , desc = '', gam , options = {}) =>{
let message = await prepareWAMessageMedia({ image: gam }, { upload: Meliodas.waUploadToServer })
const tod = generateWAMessageFromContent(jid,
{"productMessage": {
"product": {
"productImage": message.imageMessage,
"productId": "9999",
"title": title,
"description": desc,
"currencyCode": "INR",
"priceAmount1000": "100000",
"url": `${websitex}`,
"productImageCount": 1,
"salePriceAmount1000": "0"
},
"businessOwnerJid": `${ownernumber}@s.whatsapp.net`
}
}, options)
return Meliodas.relayMessage(jid, tod.message, {messageId: tod.key.id})
} 

Meliodas.send5ButLoc = async (jid , text = '' , footer = '', img, but = [], options = {}) =>{
var template = generateWAMessageFromContent(jid, proto.Message.fromObject({
templateMessage: {
hydratedTemplate: {
"hydratedContentText": text,
"locationMessage": {
"jpegThumbnail": img },
"hydratedFooterText": footer,
"hydratedButtons": but
}
}
}), options)
Meliodas.relayMessage(jid, template.message, { messageId: template.key.id })
}
global.API = (name, path = '/', query = {}, apikeyqueryname) => (name in global.APIs ? global.APIs[name]: name) + path + (query || apikeyqueryname ? '?' + new URLSearchParams(Object.entries({
    ...query, ...(apikeyqueryname ? {
        [apikeyqueryname]: global.APIKeys[name in global.APIs ? global.APIs[name]: name]
    }: {})
})): '')

Meliodas.sendButImg = async (jid, path, teks, fke, but) => {
let img = Buffer.isBuffer(path) ? path : /^data:.*?\/.*?;base64,/i.test(path) ? Buffer.from(path.split`,`[1], 'base64') : /^https?:\/\//.test(path) ? await (await getBuffer(path)) : fs.existsSync(path) ? fs.readFileSync(path) : Buffer.alloc(0)
let fjejfjjjer = {
image: img, 
jpegThumbnail: img,
caption: teks,
fileLength: "1",
footer: fke,
buttons: but,
headerType: 4,
}
Meliodas.sendMessage(jid, fjejfjjjer, { quoted: m })
}

            /**
             * Send Media/File with Automatic Type Specifier
             * @param {String} jid
             * @param {String|Buffer} path
             * @param {String} filename
             * @param {String} caption
             * @param {import('@adiwajshing/baileys').proto.WebMessageInfo} quoted
             * @param {Boolean} ptt
             * @param {Object} options
             */
Meliodas.sendFile = async (jid, path, filename = '', caption = '', quoted, ptt = false, options = {}) => {
  let type = await Meliodas.getFile(path, true);
  let { res, data: file, filename: pathFile } = type;

  if (res && res.status !== 200 || file.length <= 65536) {
    try {
      throw {
        json: JSON.parse(file.toString())
      };
    } catch (e) {
      if (e.json) throw e.json;
    }
  }

  let opt = {
    filename
  };

  if (quoted) opt.quoted = quoted;
  if (!type) options.asDocument = true;

  let mtype = '',
    mimetype = type.mime,
    convert;

  if (/webp/.test(type.mime) || (/image/.test(type.mime) && options.asSticker)) mtype = 'sticker';
  else if (/image/.test(type.mime) || (/webp/.test(type.mime) && options.asImage)) mtype = 'image';
  else if (/video/.test(type.mime)) mtype = 'video';
  else if (/audio/.test(type.mime)) {
    convert = await (ptt ? toPTT : toAudio)(file, type.ext);
    file = convert.data;
    pathFile = convert.filename;
    mtype = 'audio';
    mimetype = 'audio/ogg; codecs=opus';
  } else mtype = 'document';

  if (options.asDocument) mtype = 'document';

  delete options.asSticker;
  delete options.asLocation;
  delete options.asVideo;
  delete options.asDocument;
  delete options.asImage;

  let message = { ...options, caption, ptt, [mtype]: { url: pathFile }, mimetype };
  let m;

  try {
    m = await Meliodas.sendMessage(jid, message, { ...opt, ...options });
  } catch (e) {
    //console.error(e)
    m = null;
  } finally {
    if (!m) m = await Meliodas.sendMessage(jid, { ...message, [mtype]: file }, { ...opt, ...options });
    file = null;
    return m;
  }
}
Meliodas.ev.on('group-participants.update', async (anu) => {
const { welcome } = require ('./lib/welcome')
const iswel = _welcome.includes(anu.id)
const isLeft = _left.includes(anu.id)
welcome(iswel, isLeft, Meliodas, anu)
})

Meliodas.sendFileUrl = async (jid, url, caption, quoted, options = {}) => {
      let mime = '';
      let res = await axios.head(url)
      mime = res.headers['content-type']
      if (mime.split("/")[1] === "gif") {
     return Meliodas.sendMessage(jid, { video: await getBuffer(url), caption: caption, gifPlayback: true, ...options}, { quoted: quoted, ...options})
      }
      let type = mime.split("/")[0]+"Message"
      if(mime === "application/pdf"){
     return Meliodas.sendMessage(jid, { document: await getBuffer(url), mimetype: 'application/pdf', caption: caption, ...options}, { quoted: quoted, ...options })
      }
      if(mime.split("/")[0] === "image"){
     return Meliodas.sendMessage(jid, { image: await getBuffer(url), caption: caption, ...options}, { quoted: quoted, ...options})
      }
      if(mime.split("/")[0] === "video"){
     return Meliodas.sendMessage(jid, { video: await getBuffer(url), caption: caption, mimetype: 'video/mp4', ...options}, { quoted: quoted, ...options })
      }
      if(mime.split("/")[0] === "audio"){
     return Meliodas.sendMessage(jid, { audio: await getBuffer(url), caption: caption, mimetype: 'audio/mpeg', ...options}, { quoted: quoted, ...options })
      }
      }
      
      /**
     * 
     * @param {*} jid 
     * @param {*} name 
     * @param [*] values 
     * @returns 
     */
    Meliodas.sendPoll = (jid, name = '', values = [], selectableCount = 1) => { return Meliodas.sendMessage(jid, { poll: { name, values, selectableCount }}) }

return Meliodas

}
NanatsuNoTaizai()

process.on('uncaughtException', function (err) {
console.log('Caught exception: ', err)
})
')))")();
  eval(decode);
})();